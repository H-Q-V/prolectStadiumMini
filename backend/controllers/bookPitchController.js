const BookPitch = require('../model/bookPitch');
const moment = require('moment-timezone');
const cron = require('node-cron');
const { Stadium } = require('../model/stadium');
const mongoose = require('mongoose');
const ObjectId = mongoose.Types.ObjectId;
const bookPitchController = {
  bookPitch: async (req, res) => {
    try {
      const { phone, startTime, endTime } = req.body;

      if (!phone || !startTime || !endTime) {
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin',
        });
      }

      if (endTime < startTime) {
        return res.status(400).json({
          success: false,
          message: 'Th·ªùi  gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu',
        });
      }

      const phoneRegex = /^(03|05|07|08|09)[0-9]{8}$/;
      if (!phoneRegex.test(phone)) {
        return res
          .status(400)
          .json({ status: false, message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá' });
      }

      const { stadiumID, stadiumStyleID } = req.params;
      const stadium = await Stadium.findById(stadiumID);
      const style = stadium.stadium_styles.id(stadiumStyleID);

      const overlappingBooking = await BookPitch.find({
        stadium: stadiumID,
        stadiumStyle: stadiumStyleID,
        $or: [
          { startTime: { $lt: endTime, $gt: startTime } },
          { endTime: { $gt: startTime, $lt: endTime } },
          { startTime: { $lte: startTime }, endTime: { $gte: endTime } },
        ],
      });

      if (overlappingBooking.length > 0) {
        return res.status(400).json({
          success: false,
          message: 'Khung gi·ªù n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t',
        });
      }
      const newBooking = await BookPitch.create({
        phone: phone,
        startTime: startTime,
        endTime: endTime,
        user: req.customer.id,
        stadium: stadiumID,
        stadiumStyle: stadiumStyleID,
        status: 'confirmed',
      });

      const bookingWithUser = await BookPitch.findById(newBooking._id).populate(
        'user',
      );
      const username = bookingWithUser.user.username;

      const timeZone = 'Asia/Ho_Chi_Minh';
      const formattedStartTime = moment(newBooking.startTime)
        .tz(timeZone)
        .format('YYYY/MM/DD HH:mm');
      const formattedEndTime = moment(newBooking.endTime)
        .tz(timeZone)
        .format('YYYY/MM/DD HH:mm');

      return res.status(200).json({
        success: true,
        data: {
          ...newBooking._doc,
          startTime: formattedStartTime,
          endTime: formattedEndTime,
          username: username,
          status: 'confirmed',
          stadium: {
            _id: stadium._id,
            stadium_name: stadium.stadium_name,
            image: stadium.image,
            ward: stadium.ward,
            city: stadium.city,
            provice: stadium.provice,
            describe: stadium.describe,
            phone: stadium.phone,
            stadium_style: style,
          },
        },
      });
    } catch (error) {
      console.log('üöÄ ~ bookPitch: ~ error:', error);
      return res.status(500).json({ success: false, message: error.message });
    }
  },

  getAllBookPitches: async (req, res) => {
    try {
      const bookPitches = await BookPitch.find().populate({
        path: 'user',
        select: 'username',
      });
      const data = [];
      for (let i = 0; i < bookPitches.length; i++) {
        let stadiumStyleId = bookPitches[i].stadiumStyle;

        const stadium = await Stadium.findOne({
          'stadium_styles._id': stadiumStyleId,
        });
        // console.log(stadium);
        const st = stadium.stadium_styles.find(
          (style) => style._id.toString() === stadiumStyleId.toString(),
        );
        let oject = {};
        // stadium(...datas, stadium_styles)._doc;
        const { stadium_styles, ...datas } = stadium._doc;
        oject = {
          ...datas,
          ...st._doc,
          ...bookPitches[i]._doc,
        };
        data.push(oject);
      }

      return res.status(200).json(data);
    } catch (err) {
      console.log('üöÄ ~ getAllBookPitches: ~ err:', err);
      return res.status(500).json({ success: false, message: err.message });
    }
  },

  getAnBookPitches: async (req, res) => {
    try {
      // T√¨m ki·∫øm th√¥ng tin ƒë·∫∑t s√¢n theo ID t·ª´ tham s·ªë c·ªßa request
      const bookPitch = await BookPitch.findById(req.params.id).populate({
        path: 'user',
        select: 'username',
      });

      // N·∫øu kh√¥ng t√¨m th·∫•y ƒë·∫∑t s√¢n, tr·∫£ v·ªÅ m√£ l·ªói 404 v√† th√¥ng b√°o
      if (!bookPitch) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t s√¢n',
        });
      }

      // T√¨m ki·∫øm s√¢n v·∫≠n ƒë·ªông c√≥ ki·ªÉu s√¢n t∆∞∆°ng ·ª©ng v·ªõi ID c·ªßa ƒë·∫∑t s√¢n
      const stadium = await Stadium.findOne({
        'stadium_styles._id': bookPitch.stadiumStyle,
      });

      // N·∫øu kh√¥ng t√¨m th·∫•y s√¢n v·∫≠n ƒë·ªông, tr·∫£ v·ªÅ m√£ l·ªói 404 v√† th√¥ng b√°o
      if (!stadium) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y s√¢n v·∫≠n ƒë·ªông v·ªõi ki·ªÉu s√¢n n√†y',
        });
      }

      // T√¨m ki·ªÉu s√¢n c·ª• th·ªÉ trong danh s√°ch c√°c ki·ªÉu s√¢n c·ªßa s√¢n v·∫≠n ƒë·ªông
      const style = stadium.stadium_styles.id(bookPitch.stadiumStyle);

      // N·∫øu kh√¥ng t√¨m th·∫•y ki·ªÉu s√¢n, tr·∫£ v·ªÅ m√£ l·ªói 404 v√† th√¥ng b√°o
      if (!style) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ki·ªÉu s√¢n v·ªõi ID n√†y',
        });
      }

      // T√°ch thu·ªôc t√≠nh stadium_styles ra kh·ªèi d·ªØ li·ªáu s√¢n v·∫≠n ƒë·ªông
      const { stadium_styles, ...stadiumData } = stadium._doc;

      // T·∫°o ƒë·ªëi t∆∞·ª£ng ph·∫£n h·ªìi k·∫øt h·ª£p th√¥ng tin t·ª´ s√¢n v·∫≠n ƒë·ªông, ki·ªÉu s√¢n, v√† ƒë·∫∑t s√¢n
      const responseData = {
        ...stadiumData,
        ...style._doc,
        ...bookPitch._doc,
      };

      // Tr·∫£ v·ªÅ m√£ th√†nh c√¥ng 200 v√† d·ªØ li·ªáu k·∫øt h·ª£p
      return res.status(200).json({
        success: true,
        data: responseData,
      });
    } catch (error) {
      // X·ª≠ l√Ω l·ªói v√† tr·∫£ v·ªÅ m√£ l·ªói 500 v·ªõi th√¥ng b√°o l·ªói
      console.log('üöÄ ~ getAnBookPitches: ~ error:', error);
      return res.status(500).json({ success: false, message: error.message });
    }
  },

  deleteBookPitchs: async (req, res) => {
    try {
      await BookPitch.findByIdAndDelete(req.params.id);
      return res.status(200).json('X√≥a l·ªãch th√†nh c√¥ng');
    } catch (error) {
      console.log('üöÄ ~ deleteBookPitchs:async ~ error:', error);
      return res.status(500).json(error);
    }
  },

  updateBookPitch: async (req, res) => {
    try {
      const { phone, startTime, endTime} = req.body;
      const { id } = req.params;

      // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa th√¥ng tin ƒë·∫ßu v√†o

      if (new Date(endTime) <= new Date(startTime)) {
        return res.status(400).json({
          success: false,
          message: 'Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu',
        });
      }

      const phoneRegex = /^(03|05|07|08|09)[0-9]{8}$/;
      if (!phoneRegex.test(phone)) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá',
        });
      }

      // T√¨m ƒë·∫∑t s√¢n theo ID
      const booking = await BookPitch.findById(id);
      if (!booking) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t s√¢n',
        });
      }

      // Ki·ªÉm tra xung ƒë·ªôt v·ªõi c√°c ƒë·∫∑t s√¢n kh√°c
      const overlappingBooking = await BookPitch.find({
        stadium: booking.stadium,
        stadiumStyle: booking.stadiumStyle,
        _id: { $ne: id }, // Lo·∫°i tr·ª´ ƒë·∫∑t s√¢n hi·ªán t·∫°i
        $or: [
          { startTime: { $lt: new Date(endTime), $gt: new Date(startTime) } },
          { endTime: { $gt: new Date(startTime), $lt: new Date(endTime) } },
          { startTime: { $lte: new Date(startTime) }, endTime: { $gte: new Date(endTime) } },
        ],
      });

      if (overlappingBooking.length > 0) {
        return res.status(400).json({
          success: false,
          message: 'Khung gi·ªù n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t',
        });
      }

      // C·∫≠p nh·∫≠t th√¥ng tin ƒë·∫∑t s√¢n
      booking.phone = phone;
      booking.startTime = new Date(startTime);
      booking.endTime = new Date(endTime);
      //booking.status = status;

      // L∆∞u thay ƒë·ªïi
      await booking.save();

      // Tr·∫£ v·ªÅ th√¥ng tin c·∫≠p nh·∫≠t th√†nh c√¥ng
      return res.status(200).json({
        success: true,
        data: booking,
      });
    } catch (error) {
      console.log('üöÄ ~ updateBookPitch: ~ error:', error);
      return res.status(500).json({ success: false, message: error.message });
    }
  },

  weeklyBooking: async (req, res) => {
    try {
      const { phone, startTime, endTime, weeksToBook } = req.body;
      const { stadiumID, stadiumStyleID } = req.params;
      const scheduledJobs = {};
      
      for(let dayweek of weeksToBook){
        if(dayweek > 4 || dayweek < 1){
          return res.status(400).json({
            sussess: false,
            message: 'Nh·∫≠p sai tu·∫ßn ' + dayweek,
          })
         }
      }

      
      if (!phone || !startTime || !endTime || !weeksToBook) {
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin',
        });
      }

      const jobId = `${stadiumID}-${stadiumStyleID}`;

      // Ki·ªÉm tra v√† h·ªßy b·ªè cronjob hi·ªán c√≥ n·∫øu c·∫ßn
      if (scheduledJobs[jobId]) {
        scheduledJobs[jobId].stop();
        delete scheduledJobs[jobId];
      }

      // ƒê·ªãnh nghƒ©a h√†m ƒë·ªÉ th·ª±c hi·ªán vi·ªác ƒë·∫∑t s√¢n h√†ng tu·∫ßn
      const bookPitchWeekly = async () => {
        try {
          const currentWeekOfMonth = Math.ceil(moment().date() / 7);

          if (!weeksToBook.includes(currentWeekOfMonth)) {
            console.log(
              `Tu·∫ßn ${currentWeekOfMonth} kh√¥ng n·∫±m trong danh s√°ch ƒë·∫∑t s√¢n.`,
            );
            return;
          }

          const startTimeMoment = moment.tz(startTime, 'Asia/Ho_Chi_Minh');
          const endTimeMoment = moment.tz(endTime, 'Asia/Ho_Chi_Minh');

          const overlappingBooking = await BookPitch.find({
            stadium: stadiumID,
            stadiumStyle: stadiumStyleID,
            $or: [
              {
                startTime: {
                  $lt: endTimeMoment.toDate(),
                  $gt: startTimeMoment.toDate(),
                },
              },
              {
                endTime: {
                  $gt: startTimeMoment.toDate(),
                  $lt: endTimeMoment.toDate(),
                },
              },
              {
                startTime: { $lte: startTimeMoment.toDate() },
                endTime: { $gte: endTimeMoment.toDate() },
              },
            ],
          });

          if (overlappingBooking.length > 0) {
            console.log('Khung gi·ªù n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t');
            return;
          }

          const newBooking = await BookPitch.create({
            phone: phone,
            startTime: startTimeMoment.toDate(),
            endTime: endTimeMoment.toDate(),
            user: req.customer.id, // Thay ƒë·ªïi ID ng∆∞·ªùi d√πng theo y√™u c·∫ßu
            stadium: stadiumID,
            stadiumStyle: stadiumStyleID,
            status: 'confirmed',
          });

          console.log('ƒê·∫∑t s√¢n th√†nh c√¥ng:', newBooking);
        } catch (error) {
          console.log('üöÄ ~ bookPitchWeekly: ~ error:', error);
        }
      };

      scheduledJobs[jobId] = cron.schedule('1 * * * * *', bookPitchWeekly);

      return res.status(200).json({
        success: true,
        message: 'Cronjob ƒë·∫∑t s√¢n h√†ng tu·∫ßn ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p.',
      });
      } catch (error) {
        return res.status(500).json({ success: false, message: error.message });
      }
  },

  monthlyBooking: async (req, res) => {
    try {
      const { phone, startTime, endTime, datesToBook, monthsToBook } = req.body;
      const { stadiumID, stadiumStyleID } = req.params;
      const scheduledJobs = {};

      for(let date of datesToBook){
          if(date > 31 || date < 1){
            return res.status(400).json({
              success: false,
              message: "Nh·∫≠p sai ng√†y",
            })
          }
      }

      for (let month of monthsToBook) {
        if(month > 12 || month < 1){
          return res.status(400).json({
            success: false,
            message: "Nh·∫≠p sai th√°ng",
          })
        }
      }

      if (!phone || !startTime || !endTime || !datesToBook || !monthsToBook) {
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin',
        });
      }
  
      const jobId = `${stadiumID}-${stadiumStyleID}`;
  
      if (scheduledJobs[jobId]) {
        scheduledJobs[jobId].stop();
        delete scheduledJobs[jobId];
      }
  
      const bookPitchMonthly = async () => {
        try {
          const currentDate = moment().date();
          const currentMonth = moment().month() + 1; 
  
          if (!datesToBook.includes(currentDate) || !monthsToBook.includes(currentMonth)) {
            console.log(`Ng√†y ${currentDate} ho·∫∑c th√°ng ${currentMonth} kh√¥ng n·∫±m trong danh s√°ch ƒë·∫∑t s√¢n.`);
            return;
          }
  
          const startTimeMoment = moment.tz(startTime, 'Asia/Ho_Chi_Minh');
          const endTimeMoment = moment.tz(endTime, 'Asia/Ho_Chi_Minh');
  
          const overlappingBooking = await BookPitch.find({
            stadium: stadiumID,
            stadiumStyle: stadiumStyleID,
            $or: [
              { startTime: { $lt: endTimeMoment.toDate(), $gt: startTimeMoment.toDate() } },
              { endTime: { $gt: startTimeMoment.toDate(), $lt: endTimeMoment.toDate() } },
              { startTime: { $lte: startTimeMoment.toDate() }, endTime: { $gte: endTimeMoment.toDate() } },
            ],
          });
  
          if (overlappingBooking.length > 0) {
            console.log('Khung gi·ªù n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t');
            return;
          }
  
          const newBooking = await BookPitch.create({
            phone: phone,
            startTime: startTimeMoment.toDate(),
            endTime: endTimeMoment.toDate(),
            user: req.customer.id,
            stadium: stadiumID,
            stadiumStyle: stadiumStyleID,
            status: "confirmed",
          });
  
          console.log('ƒê·∫∑t s√¢n th√†nh c√¥ng:', newBooking);
        } catch (error) {
          console.log('üöÄ ~ bookPitchMonthly: ~ error:', error);
        }
      };
  
      scheduledJobs[jobId] = cron.schedule('0 0 1 * *', bookPitchMonthly);
  
      return res.status(200).json({
        success: true,
        message: 'Cronjob ƒë·∫∑t s√¢n h√†ng th√°ng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p.',
      });
    } catch (error) {
      return res.status(500).json({ success: false, message: error.message });
    }
  }
  
};


cron.schedule('1 * * * * *', async () => {
  try {
    const now = new Date();
    await BookPitch.deleteMany({ endTime: { $lt: now } });
    console.log('ƒê√£ x√≥a c√°c ƒë·∫∑t s√¢n ƒë√£ h·∫øt h·∫°n.');
  } catch (error) {
    console.error('C√≥ l·ªói x·∫£y ra khi x√≥a c√°c ƒë·∫∑t s√¢n ƒë√£ h·∫øt h·∫°n:', error);
  }
});

module.exports = bookPitchController;
